using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using VRIS.API.ViewModels;
using VRIS.Business.Stores.Token;
using VRIS.Domain.ConfigurationModels;

namespace VRIS.API.Controllers
{
    /// <summary>
    /// Controller responsible for authorizing the Graph api
    /// </summary>
    [Route("api/[controller]"), Produces("application/json")]
    public class AuthorizationController : Controller
    {
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly MicrosoftGraphOptions _graphOptions;
        private readonly ITokenStore _tokenStore;

        private string AuthorizeCallback =>
            $"https://{_httpContextAccessor.HttpContext.Request.Host}/api/authorization/token";
        private string LoginUrl =>
            $"{_graphOptions.AuthContextUrl}/authorize" +
            $"?client_id={_graphOptions.ClientId}" +
            $"&response_type=code" +
            $"&redirect_uri={AuthorizeCallback}" +
            $"&response_mode=query" +
            $"&scope=user.readbasic.all calendars.readwrite.shared";

        /// <inheritdoc cref="AuthorizationController"/>
        public AuthorizationController(IHttpContextAccessor httpContextAccessor, MicrosoftGraphOptions graphOptions, ITokenStore tokenStore)
        {
            _httpContextAccessor = httpContextAccessor;
            _graphOptions = graphOptions;
            _tokenStore = tokenStore;
        }

        /// <summary>
        /// Get the loginUrl to the azure portal
        /// </summary>
        /// <returns>The url to get a token response from Azure from</returns>
        /// <response code="200">The url to get a token response from Azure from</response>
        [HttpGet("loginurl"), Produces("text/html"),
         ProducesResponseType(typeof(string), (int)HttpStatusCode.OK)]
        public IActionResult GetLoginUrl() => new ContentResult
        {
            Content = $"<a href=\"{LoginUrl}\">{LoginUrl}</a>",
            ContentType = "text/html"
        };

        /// <summary>
        /// Request a token based on a authorization code
        /// </summary>
        /// <param name="authorizationCode">Code generated by the /code call</param>
        /// <returns>Authorization token</returns>
        /// <response code="200">Authorization token</response>
        /// <response code="405">The parameter {authorizationCode} cannot be empty!</response>
        /// <response code="417">The graph api returned an empty response</response>
        [HttpPost("token"),
         ProducesResponseType(typeof(string), (int)HttpStatusCode.OK),
         ProducesResponseType(typeof(string), (int)HttpStatusCode.MethodNotAllowed),
         ProducesResponseType(typeof(string), (int)HttpStatusCode.ExpectationFailed)]
        public async Task<IActionResult> Token([Required, FromQuery] string authorizationCode)
        {
            if (string.IsNullOrWhiteSpace(authorizationCode)) return new ContentResult
            {
                Content = $"The parameter {nameof(authorizationCode)} cannot be empty!",
                StatusCode = (int) HttpStatusCode.MethodNotAllowed
            };

            return await AuthorizeGraphToken(authorizationCode);
        }

        private async Task<IActionResult> AuthorizeGraphToken(string authorizationCode)
        {
            using (var client = new HttpClient())
            {
                var url = $"{_graphOptions.AuthContextUrl}/authorize";
                var payload = new Dictionary<string, string>
                {
                    {"client_id", _graphOptions.ClientId},
                    {"client_secret", _graphOptions.ClientSecret},
                    {"grant_type", "authorization_code"},
                    {"code", authorizationCode},
                    {"redirect_uri", AuthorizeCallback}
                };
                var response = await client.PostAsync(url, new FormUrlEncodedContent(payload));
                response.EnsureSuccessStatusCode();

                var responseMessage = await response.Content.ReadAsStringAsync();
                if (String.IsNullOrWhiteSpace(responseMessage))
                    return new ContentResult
                    {
                        Content = "The graph api returned an empty response",
                        StatusCode = (int) HttpStatusCode.ExpectationFailed
                    };
                var responseObject = JObject.Parse(responseMessage);

                var returnString = responseObject?["access_token"] != null
                    ? responseObject["access_token"].Value<string>()
                    : "Unable to parse response";
                
                _tokenStore.StoredToken = returnString;
                return new ContentResult {Content = $"Stored token: {returnString} using authorizationCode: {authorizationCode}"};
            }
        }
    }
}
